cmake_minimum_required(VERSION 3.5)

project(rosidl_typesupport_fastrtps_cpp)

if(DEFINED ENV{FASTRTPS_STATIC_DISABLE})
  set(FASTRTPS_STATIC_DISABLE $ENV{FASTRTPS_STATIC_DISABLE}
    CACHE BOOL "If FastRTPS Static should be disabled.")
else()
  set(FASTRTPS_STATIC_DISABLE FALSE
    CACHE BOOL "If FastRTPS Static should be disabled.")
endif()

# Default to C++14
if(NOT CMAKE_CXX_STANDARD)
  set(CMAKE_CXX_STANDARD 14)
endif()

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

find_package(ament_cmake REQUIRED)

find_package(fastrtps_cmake_module QUIET)
find_package(fastcdr REQUIRED CONFIG)
find_package(fastrtps REQUIRED CONFIG)
find_package(FastRTPS REQUIRED MODULE)
if(FASTRTPS_STATIC_DISABLE)
  ament_package()
  message(STATUS "fastrtps static rmw implementation explicitly disabled - skipping '${PROJECT_NAME}'")
  return()
endif()

find_package(ament_cmake_python REQUIRED)

ament_export_dependencies(fastrtps)
ament_export_dependencies(rmw)
ament_export_dependencies(rosidl_cmake)
ament_export_dependencies(rosidl_runtime_c)
ament_export_dependencies(rosidl_runtime_cpp)
ament_export_dependencies(rosidl_typesupport_interface)

ament_export_include_directories(include)

ament_python_install_package(${PROJECT_NAME})

add_library(${PROJECT_NAME} SHARED
  src/identifier.cpp
  src/wstring_conversion.cpp)
if(WIN32)
  target_compile_definitions(${PROJECT_NAME}
    PRIVATE "ROSIDL_TYPESUPPORT_FASTRTPS_CPP_BUILDING_DLL")
endif()
target_include_directories(${PROJECT_NAME} PUBLIC
  "$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>"
  "$<INSTALL_INTERFACE:include>")
ament_export_libraries(${PROJECT_NAME})
ament_export_targets(${PROJECT_NAME})

ament_index_register_resource("rosidl_typesupport_cpp")

if(BUILD_TESTING)
  find_package(ament_cmake_gtest REQUIRED)
  find_package(ament_lint_auto REQUIRED)
  find_package(osrf_testing_tools_cpp REQUIRED)

  find_package(performance_test_fixture REQUIRED)

  # Give cppcheck hints about macro definitions coming from outside this package
  get_target_property(ament_cmake_cppcheck_ADDITIONAL_INCLUDE_DIRS
    performance_test_fixture::performance_test_fixture INTERFACE_INCLUDE_DIRECTORIES)

  set(ament_cmake_cppcheck_LANGUAGE c++)
  ament_lint_auto_find_test_dependencies()

  get_target_property(memory_tools_ld_preload_env_var
    osrf_testing_tools_cpp::memory_tools LIBRARY_PRELOAD_ENVIRONMENT_VARIABLE)
  get_target_property(memory_tools_is_available
    osrf_testing_tools_cpp::memory_tools LIBRARY_PRELOAD_ENVIRONMENT_IS_AVAILABLE)

  set(SKIP_MEMORY_TOOLS_TEST "")
  if(NOT memory_tools_is_available)
    set(SKIP_MEMORY_TOOLS_TEST "SKIP_TEST")
  endif()

  ament_add_gtest(test_wstring_conversion test/test_wstring_conversion.cpp)
  if(TARGET test_wstring_conversion)
    target_include_directories(test_wstring_conversion PRIVATE
      ${osrf_testing_tools_cpp_INCLUDE_DIRS})
    target_link_libraries(test_wstring_conversion
      ${PROJECT_NAME})
  endif()

  ament_add_gtest(test_wstring_conversion_mem test/test_wstring_conversion_mem.cpp
    ENV ${memory_tools_ld_preload_env_var}
    ${SKIP_MEMORY_TOOLS_TEST})
  if(TARGET test_wstring_conversion_mem)
    target_link_libraries(test_wstring_conversion_mem
      ${PROJECT_NAME} osrf_testing_tools_cpp::memory_tools)
  endif()

  add_performance_test(benchmark_string_conversions test/benchmark/benchmark_string_conversions.cpp)
  if(TARGET benchmark_string_conversions)
    target_link_libraries(benchmark_string_conversions ${PROJECT_NAME})
  endif()
endif()

ament_package(
  CONFIG_EXTRAS "rosidl_typesupport_fastrtps_cpp-extras.cmake.in"
)

install(
  PROGRAMS bin/rosidl_typesupport_fastrtps_cpp
  DESTINATION lib/rosidl_typesupport_fastrtps_cpp
)
install(
  DIRECTORY cmake resource
  DESTINATION share/${PROJECT_NAME}
)
install(
  DIRECTORY include/
  DESTINATION include
)
install(
  TARGETS ${PROJECT_NAME} EXPORT ${PROJECT_NAME}
  ARCHIVE DESTINATION lib
  LIBRARY DESTINATION lib
  RUNTIME DESTINATION bin
)
